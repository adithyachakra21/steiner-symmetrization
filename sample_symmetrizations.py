# -*- coding: utf-8 -*-
"""
Created on Tue Jul 23 15:50:37 2019

@author: Owner
"""

from convex_polygons import*
import math
from sympy import Point, Polygon, Line, convex_hull, Point2D, RegularPolygon

import statistics

pi = math.pi

import xlwt 
from xlwt import Workbook 
  
# Workbook is created 
wb = Workbook() 
  
# add_sheet is used to create sheet. 
sheet1 = wb.add_sheet('Sheet 1') 

sheet1.write(0, 0, 'Number of sides')
sheet1.write(0, 1, 'Angle')
sheet1.write(0, 2, 'Sl SD')
sheet1.write(0, 3, 'Angle SD')
sheet1.write(0,4, 'New Vertices')
sheet1.write(0,5, 'Moment of Inertia')


  
"""



Step 1: ONE STEP SYMMETRIZATIONS (after the "admission price" of two basis symmetrizations)

Question: At what angle \thetha \in (0,2pi) does the side length and angle standard deviation hit a minimum? We will try 14 angles.
Strategy: We will try this first for several regular polygons (3,4,5,6,7,8).
"""

      
        
#symmetrizing the polygon twice already
        
#poly2 = symmetrize (poly3, 0)
#poly = symmetrize (Polygon(*poly2), pi/2)


#manually graph and figure out the best angle range for these five polygons.

new_vertices = [[-789514767631027/1000000000000000, -87029445085391/2000000000000000], [-141099441340557/200000000000000, -357072528654907/1000000000000000], [-79308134364613/100000000000000, -174319663896141/10000000000000000], [-173886143514963/250000000000000, -190722073045871/500000000000000], [-794159095254673/1000000000000000, -37706895747551/25000000000000000], [-172129022262991/250000000000000, -395773342442727/1000000000000000], [-786476816806309/1000000000000000, 496822268830801/5000000000000000], [-39464167247419/62500000000000, -479290549597813/1000000000000000], [-782163398530523/1000000000000000, 74978639069819/500000000000000], [-301197366983993/500000000000000, -520948511616557/1000000000000000], [-771695113301507/1000000000000000, 186264844111427/1000000000000000], [-575175150039703/1000000000000000, -547157643483197/1000000000000000], [-692191665258051/1000000000000000, 13705586827467/31250000000000], [-76033235432371/200000000000000, -362958098176269/500000000000000], [-16579151697257/25000000000000, 24894901525953/50000000000000], [-40671205807661/125000000000000, -152555075373777/200000000000000], [-655332704383391/1000000000000000, 63582018823431/125000000000000], [-313206694633051/1000000000000000, -192043875097907/250000000000000], [-307385085968449/500000000000000, 5485034819903/10000000000000], [-64538711347783/250000000000000, -782403035436269/1000000000000000], [-588005856106773/1000000000000000, 284731762026583/500000000000000], [-2244962469359/10000000000000, -787172806412039/1000000000000000], [-549099248092983/1000000000000000, 14813326701759/25000000000000], [-179267364012277/1000000000000000, -787698313577757/1000000000000000], [-381705986372037/1000000000000000, 136665350877657/200000000000000], [22192592438723/2000000000000000, -782631321571843/1000000000000000], [-37359462526367/100000000000000, 686866145837441/1000000000000000], [12431647951909/625000000000000, -390820421963283/500000000000000], [-13336817615483/40000000000000, 703340996875047/1000000000000000], [629199269213209/10000000000000000, -775821391010399/1000000000000000], [-290178407419521/1000000000000000, 144046134856287/200000000000000], [1088134646857/10000000000000, -768827264222279/1000000000000000], [-216003544519693/1000000000000000, 740659297522713/1000000000000000], [183265091899819/1000000000000000, -749431539463653/1000000000000000], [-635350866826607/10000000000000000, 774309942570699/1000000000000000], [166065986093259/500000000000000, -28093584960417/40000000000000], [-540890323115037/10000000000000000, 775862944625321/1000000000000000], [341088996264781/1000000000000000, -17474038401407/25000000000000], [585676936930099/100000000000000000, 390969164831859/500000000000000], [19802063794489/50000000000000, -674250072996901/1000000000000000], [144875379024507/500000000000000, 79498499154243/100000000000000], [648424013007459/1000000000000000, -108720363855719/200000000000000], [298673295087061/1000000000000000, 198782648349621/250000000000000], [328111978838321/500000000000000, -539266645665753/1000000000000000], [334376389834097/1000000000000000, 49541199351627/62500000000000], [5358656584649/7812500000000, -259637399921141/500000000000000], [69019985605377/200000000000000, 788188357532811/1000000000000000], [692959483281869/1000000000000000, -31877573536069/62500000000000], [378218537783021/1000000000000000, 94619252530717/125000000000000], [44126492001573/62500000000000, -233216071069029/500000000000000], [23689922371571/62500000000000, 378069754258101/500000000000000], [706326947657489/1000000000000000, -465316644207543/1000000000000000], [293532930531207/500000000000000, 3333447959689/6250000000000], [193772446537439/250000000000000, -84181583957123/500000000000000], [331095525080547/500000000000000, 438714645718183/1000000000000000], [396415797228647/500000000000000, -488425031236897/10000000000000000], [133066069981861/200000000000000, 43385078135297/100000000000000], [198279593901683/250000000000000, -215303115743739/5000000000000000], [723638192016047/1000000000000000, 5159744454497/15625000000000], [395900439989221/500000000000000, 758370304316853/10000000000000000], [734533839502909/1000000000000000, 75690126771387/250000000000000], [157501043698323/200000000000000, 105068629352711/1000000000000000], [183871665699151/250000000000000, 300300252818159/1000000000000000], [787100260535577/1000000000000000, 107675683694887/1000000000000000], [-150019573267693/200000000000000, -2009881175297/10000000000000], [190603603572791/250000000000000, 40857665321433/200000000000000]]


poly = Polygon ((0,0),100,n=4)

out = []
for e in new_vertices:
    out += [[float(e[0]),float(e[1])]]
    
poly = convex_hull(*out)   

angle = 0




     
for i in range (1,2):
    
    #if i != 0:
       # poly = convex_hull(*sym)
    
    
    if i % 2 == 2:
        angle = float(1/sqrt(2)) + 1/12
        
    if i % 2 == 1:
        angle = 1/12
        
     
     
    #i = 2*j-1
    #if j == 16:
       # continue
    #if j<10:
      #  i = 6.0+(j/10)
    #if j>9:
     #   i = 24.0+((j-10)/10)
     
    print ("   ")
    print ("angle: " + str(angle))
            
    #print ("angle: " + str(i) + "*pi/64" )
    sheet1.write(i, 1, angle)
    
    sym = symmetrize (poly, angle*pi)
    print ("vertices of sym: " + str(sym))
    sheet1.write(i,4, str(sym))
    
    #PRINT THE SIDELENGTHS
    
    sym_poly = convex_hull(*sym)
    sidelist = []
    for side in sym_poly.sides:
        sidelist += [float(side.length)]
            
    print("side lengths: " + str(sidelist))
    print("sl std: " + str(statistics.stdev(sidelist)))
    sheet1.write(i, 2, str(statistics.stdev(sidelist)))
    print("sl average: " + str(statistics.mean(sidelist)))
    print ("moment of inertia: " + str(float(moment_of_inertia(convex_hull(*sym)))))
    sheet1.write(i, 5, str(float((moment_of_inertia(convex_hull(*sym))))))
    #PRINT THE ANGLES
    
    anglelist = []
    for point in sym_poly.vertices:
        anglelist += [float(sym_poly.angles[point])]
        
    print("angle lengths: " + str(anglelist))
    print("angle std: " + str(statistics.stdev(anglelist)))
    print("angle average: " + str(statistics.mean(anglelist)))
    sheet1.write(i, 3, str(statistics.stdev(anglelist)))
    

wb.save('random1.xls')


"""
poly = Polygon ((-4,0),(-2,-5),(3,-3),(5,3),(0,6)) 
sym_poly = convex_hull(*(symmetrize (poly,pi/6)))
sidelist = []
for side in sym_poly.sides:
    sidelist += [side.length]
    
anglelist = []
for point in sym_poly.vertices:
    anglelist += [sym_poly.angles[point]]
    
print (sidelist)
print (anglelist)


 
"""



    
        



